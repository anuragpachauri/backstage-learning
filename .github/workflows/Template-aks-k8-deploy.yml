name: Template Deploy on  AKS Kubernetes Cluster
on:
  workflow_call:
    inputs:
      working_environment:
        required: true
        type: string
      Azure_Namespace_AKS:
        required: true
        type: string
      Azure_SecretProviderClass_AKS:
        required: true
        type: string
      Azure_keyvaultName_AKS:
        required: true
        type: string
      Azure_Deployment_AKS:
        required: true
        type: string
      Azure_Containers_AKS:
        required: true
        type: string
      Azure_image_AKS:
        required: true
        type: string
      Azure_Service_AKS:
        required: true
        type: string
      Azure_tlscertkeyvaulturi_AKS:
        required: true
        type: string
      Azure_Ingress_AKS:
        required: true
        type: string
      Azure_host_AKS:
        required: true
        type: string
      Azure_hosts_AKS:
        required: true
        type: string
      Azure_Resourcegroupname_AKS:
        required: true
        type: string
      Azure_Clustername_AKS:
        required: true
        type: string
      Azure_Manifestsfile_AKS:
        required: true
        type: string
      Azure_userAssignedIdentityID_AKS:
        required: true
        type: string
      Azure_tenantId_AKS:
        required: true
        type: string
      Azure_loadbalancerip_AKS:
        required: true
        type: string
      Azure_Infra_Manifestsfile_AKS:
        required: true
        type: string
      Cert_Secret_Name:
        required: true
        type: string
env:
  CLIENT_ID: ${{  vars.AZURE_NONPROD_PLATFORMENG_DEVOPS_CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.AZURE_NONPROD_PLATFORMENG_DEVOPS_CLIENT_SECRET }}
  TENANT_ID: ${{ vars.AZURE_PLATFORMENG_TENANT_ID }}
  SUBSCRIPTION_ID1: ${{ vars.AZURE_ADMIN_SUB_ID }}
  SUBSCRIPTION_ID: ${{ vars.AZURE_PLATFORMENG_SUB_ID }}

jobs:
  deploy-job:
    runs-on: 
      group: Non-Prod-Windows-runner
      labels: [self-hosted, windows]
    environment: ${{ inputs.working_environment }}
    name: ${{ inputs.working_environment }}-Deployment 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: START Deployment
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          echo "START Deployment"
          dir
          echo " platformone Manifestsfile file"
          cat ${{ inputs.Azure_Manifestsfile_AKS }}
          echo " Infra Manifestsfile file "
          cat ${{ inputs.Azure_Infra_Manifestsfile_AKS }}
        shell: pwsh
    
      - name: public IP
        id: ip
        uses: haythem/public-ip@v1.3        

      - uses: azure/setup-kubectl@v4
        name: Setup kubectl

      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.33'

      # login to az
      - uses: azure/login@v2
        with:
          creds: '{"clientId":"${{  vars.AZURE_NONPROD_PLATFORMENG_DEVOPS_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_NONPROD_PLATFORMENG_DEVOPS_CLIENT_SECRET }}","subscriptionId":"${{ vars.AZURE_PLATFORMENG_SUB_ID }}","tenantId":"${{ vars.AZURE_PLATFORMENG_TENANT_ID }}"}'

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AZURE_NONPROD_PLATFORMENG_ACR_ENDPOINT }}
          username: ${{ secrets.AZURE_NONPROD_PLATFORMENG_ACR_USERNAME }}
          password: ${{ secrets.AZURE_NONPROD_PLATFORMENG_ACR_PASSWORD }}

      - name: check kubectl version
        run: |
          kubectl version -o yaml --client
          kubelogin --version

      - name: Get Kubernetes version on the cluster
        id: k8sversion
        run:  |
            az aks show --resource-group ${{ inputs.Azure_Resourcegroupname_AKS}} --name ${{ inputs.Azure_Clustername_AKS }}
        
      - uses: cschleiden/replace-tokens@v1
        with:
            files: '["manifests/*.yaml"]'
            tokenPrefix: '__' 
            tokenSuffix: '__'
        env:
              
            aknspfone: ${{ inputs.Azure_Namespace_AKS }}
            akspcpfone: ${{ inputs.Azure_SecretProviderClass_AKS }}
            akkeyvaultName: ${{ inputs.Azure_keyvaultName_AKS }}
            akdpypfone: ${{ inputs.Azure_Deployment_AKS }}
            akpodpfone: ${{ inputs.Azure_Containers_AKS }}
            akimage: ${{ inputs.Azure_image_AKS }} 
            aksvcpfone: ${{ inputs.Azure_Service_AKS }}
            aktlscertkeyvaulturi: ${{ inputs.Azure_tlscertkeyvaulturi_AKS }}
            akingpfone: ${{ inputs.Azure_Ingress_AKS }}           
            akhost: ${{ inputs.Azure_host_AKS }}  
            akhosts: ${{ inputs.Azure_hosts_AKS }}
            akuserAssignedIdentityID: ${{ inputs.Azure_userAssignedIdentityID_AKS }}
            aktenantId: ${{ inputs.Azure_tenantId_AKS }}
            aksloadbalancerip: ${{ inputs.Azure_loadbalancerip_AKS }}
            certsecretname: ${{ inputs.Cert_Secret_Name }}

      - name: Upload the Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: "${{ inputs.Azure_Namespace_AKS }}"
          path: "./manifests"

      -   name: Login to AKS
          uses: azure/aks-set-context@v4
          with:
              cluster-name: ${{ inputs.Azure_Clustername_AKS  }}
              resource-group: ${{ inputs.Azure_Resourcegroupname_AKS}}
              admin: 'false'
              use-kubelogin: 'true'
          id: login

      -   name: Check Manifestsfile existence
          id: check_Manifestsfile_file
          uses: andstor/file-existence-action@31a502724c77ada11ba0b3442e34757182ccdbd3
          with:
              files: "${{ inputs.Azure_Manifestsfile_AKS }}, ${{ inputs.Azure_Infra_Manifestsfile_AKS }}"

      -   name: Create namespace (if it doesn't exist)
          working-directory: ${{env.GITHUB_WORKSPACE}}
          run: |
               az account set --subscription "${{ vars.AZURE_PLATFORMENG_SUB_ID }}"
               az aks get-credentials --resource-group "${{ inputs.Azure_Resourcegroupname_AKS}}" --name "${{ inputs.Azure_Clustername_AKS  }}" --overwrite-existing
               kubelogin convert-kubeconfig -l azurecli
               kubectl create namespace ${{ inputs.Azure_Namespace_AKS }} --dry-run=client -o json | kubectl apply -f -

      -   name: Apply Deployment config with additional image
          uses: azure/k8s-deploy@v5
          if: ${{ steps.check_Manifestsfile_file.outputs.files_exists == 'true' && inputs.Azure_image_AKS }}
          with:
              action: deploy
              manifests: |
                 ${{ inputs.Azure_Infra_Manifestsfile_AKS }}
              namespace: ${{ inputs.Azure_Namespace_AKS }}
                

      -   name: Apply Deployment config with additional image
          uses: azure/k8s-deploy@v5
          if: ${{ steps.check_Manifestsfile_file.outputs.files_exists == 'true' && inputs.Azure_image_AKS }}
          with:
              action: deploy
              manifests: |
                 ${{ inputs.Azure_Manifestsfile_AKS }}
              namespace: ${{ inputs.Azure_Namespace_AKS }}
